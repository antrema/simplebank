// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"fmt"
	"time"
)

type Golang014Currency string

const (
	Golang014CurrencyUSD Golang014Currency = "USD"
	Golang014CurrencyCAD Golang014Currency = "CAD"
	Golang014CurrencyEUR Golang014Currency = "EUR"
)

func (e *Golang014Currency) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Golang014Currency(s)
	case string:
		*e = Golang014Currency(s)
	default:
		return fmt.Errorf("unsupported scan type for Golang014Currency: %T", src)
	}
	return nil
}

type Golang014Account struct {
	ID        int64             `json:"id"`
	Owner     string            `json:"owner"`
	Balance   int64             `json:"balance"`
	Currency  Golang014Currency `json:"currency"`
	CreatedAt time.Time         `json:"created_at"`
}

type Golang014Entry struct {
	ID        int64 `json:"id"`
	AccountID int64 `json:"account_id"`
	// can be negative or positive
	Amount    int64     `json:"amount"`
	CreatedAt time.Time `json:"created_at"`
}

type Golang014Transfer struct {
	ID            int64 `json:"id"`
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	// must be positive
	Amount    int64     `json:"amount"`
	CreatedAt time.Time `json:"created_at"`
}
